<?php
// $Id: xmpp_relationships.module,v 1.1 2008/10/02 20:57:52 darrenferguson Exp $

/**
 * @file
 * Module providing an XMPP Relationships for Drupal
 */

define('XMPP_RELATIONSHIPS_PATH',                           drupal_get_path('module', 'xmpp_relationships'));
// Settings for the xmlrpc request portion of the function
define('XMPP_RELATIONSHIPS_SEND_SUBSCRIPTION_NOTIFICATION', variable_get('xmpp_relationships_send_subscription_notification', false));

/**
 * Implementation of hook_help().
 */
function xmpp_relationships_help($path, $arg) {
  $output = '';
  switch ($path) {
    case 'admin/modules#name':
      $output = t('xmpp_relationships');
      break;
    case 'admin/modules#description':
      $output = t('Provides an xmpp_relationship api for the Web Instance using the user_relationships module');
      break;
    case 'admin/help#xmpp_relationships':
      $output = '<p>'. t('The xmpp_relationship module allows you to have real time user presence and message updates via XMPP') .'</p>';
      break;
  }
  return $output;
}

/**
 * Implementation of hook_perm()
 */
function xmpp_relationships_perm() {
  return array('administer xmpp relationships');
}

/**
 * Implementation of hook_menu()
 */
function xmpp_relationships_menu() {
  $items['admin/xmppframework/relationships'] = array(
    'title'            => 'Relationships',
    'description'      => 'Configure the xmpp relationships module',
    'page callback'    => 'drupal_get_form',
    'page arguments'   => array('xmpp_relationships_admin_settings'),
    'access arguments' => array('administer xmpp relationships'),
    'file'             => 'xmpp_relationships.admin.inc',
  );
  return $items;
}

/**
 * Implementation of hook_xmlrpc()
 * First method in array is the return type for the call
 */
function xmpp_relationships_xmlrpc() {
  module_load_include('inc', 'xmpp_relationships', 'xmpp_relationships_xmlrpc');
  return array(
    array(
      'xmpp_relationships.update_presence',
      'xmpp_relationships_xmlrpc_update_presence',
      array('boolean', 'string', 'string', 'string'),
      t('Update a users presence.')),
  );
}

/**
 * Implementation of hook_user_relationships()
 * Hook is provided by the user_relationships_api module
 */
function xmpp_relationships_user_relationships($op, &$relationship) {
  if (array_search($relationship->rtid, variable_get('xmpp_relationships_user_relationships_types', array()))) {
    $function = '_xmpp_relationships_'. $op .'_user_relationship';
    if (function_exists($function)) {
      call_user_func($function, $relationship);
    }
  }
}

/***********************************************************************************************************************
 * FUNCTIONS BELOW ARE UTILIZED BY THE hook_user_relationships() function
 ***********************************************************************************************************************/

/**
 * creates the relationship between the users on the xmpp server when it is approved
 * will send an xmlrpc request to the server to associate both in their respective rosters
 *
 * @param $relationship
 *      Relationship object that is passed by the user_relationships_api module to hook_user_relationships()
 */
function _xmpp_relationships_approve_user_relationship($relationship) {
  $requester = user_load(array('uid' => $relationship->requester_id)); // person who requested the relationship
  $requestee = user_load(array('uid' => $relationship->requestee_id)); // person who accepted the relationship request

  // if the variables are not set then we cannot do the xmlrpc request hence ignore this portion
  if (isset($requester->xmppclient['user_name']) && isset($requester->xmppclient['server']) && isset($requestee->xmppclient['user_name']) && isset($requestee->xmppclient['server'])) {
    // add the roster item to the requestee's roster
    xmppframework_add_rosteritem($requestee->xmppclient['user_name'], $requestee->xmppclient['server'], $requester->xmppclient['user_name'], $requester->xmppclient['server'], $requester->name, t('General'), 'both');
    // add the roster item to the requester's roster
    xmppframework_add_rosteritem($requester->xmppclient['user_name'], $requester->xmppclient['server'], $requestee->xmppclient['user_name'], $requestee->xmppclient['server'], $requestee->name, t('General'), 'both');
    // if the module is configured for it send the notification via xmpp that the relationship exists
    if (XMPP_RELATIONSHIPS_SEND_SUBSCRIPTION_NOTIFICATION) {
      // sending first for the person whom accepted the relationship
      $to = $requestee->xmppclient['user_name'] .'@'. $requestee->xmppclient['server'];
      $body = t('Your relationship with '. $requester->xmppclient['user_name'] .' has been successfully created');
      xmppframework_send_message($to, 'headline', $body, t('User Relationship Approved'));
      // sending for the person who requested the relationship
      $to = $requester->xmppclient['user_name'] .'@'. $requester->xmppclient['server'];
      $body = t('Your relationship with '. $requestee->xmppclient['user_name'] .' has been successfully created');
      xmppframework_send_message($to, 'headline', $body, t('User Relationship Approved'));
    }
  }
}

/**
 * removes the relationship between the users on the xmpp server when remove has been decided
 * will send an xmlrpc request to the server to remove the association from the respective rosters
 *
 * @param $relationship
 *      Relationship object that is passed by the user_relationships_api module to hook_user_relationships()
 */
function _xmpp_relationships_remove_user_relationship($relationship) {
  $removed = user_load(array('uid' => $relationship->requestee_id)); // person being removed from the relationship
  $user = user_load(array('uid' => $relationship->requester_id)); // person who requested the removal
  // if the variables are not set then we cannot do the xmlrpc request hence ignore this portion
  if (isset($user->xmppclient['user_name']) && isset($user->xmppclient['server']) && isset($removed->xmppclient['user_name']) && isset($removed->xmppclient['server'])) {
    // removing from the roster of the person being removed from the relationship
    xmppframework_delete_rosteritem($user->xmppclient['user_name'], $user->xmppclient['server'], $removed->xmppclient['user_name'], $removed->xmppclient['server']);
    // removing from the roster of the person who requested the deletion of the relationship
    xmppframework_delete_rosteritem($removed->xmppclient['user_name'], $removed->xmppclient['server'], $user->xmppclient['user_name'], $user->xmppclient['server']);
    // if the module is configured for it send the notification via xmpp that the relationship exists
    if (XMPP_RELATIONSHIPS_SEND_SUBSCRIPTION_NOTIFICATION) {
      // sending first for the person whom accepted the relationship
      $to = $removed->xmppclient['user_name'] .'@'. $removed->xmppclient['server'];
      $body = t('Your relationship with '. $user->xmppclient['user_name'] .' has been successfully removed');
      xmppframework_send_message($to, 'headline', $body, t('User Relationship Removed'));
      // sending for the person who requested the relationship
      $to = $user->xmppclient['user_name'] .'@'. $user->xmppclient['server'];
      $body = t('Your relationship with '. $removed->xmppclient['user_name'] .' has been successfully removed');
      xmppframework_send_message($to, 'headline', $body, t('User Relationship Removed'));
    }
  }
}
