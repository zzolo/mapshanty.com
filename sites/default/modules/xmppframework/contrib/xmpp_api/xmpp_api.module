<?php
// $Id: xmpp_api.module,v 1.1 2008/10/02 20:57:51 darrenferguson Exp $

/**
 * @file
 * Module providing an XMPP API for Drupal
 */

define('XMPP_API_PATH',              drupal_get_path('module', 'xmpp_api'));
define('XMPP_API_SERVER',            variable_get('xmpp_api_server', '127.0.0.1'));
define('XMPP_API_PORT',              variable_get('xmpp_api_port', '5222'));
define('XMPP_API_ADMINJID',          variable_get('xmpp_api_adminjid', ''));
define('XMPP_API_ADMINJID_PASSWORD', variable_get('xmpp_api_adminjid_password', ''));
define('XMPP_API_ADMINJID_SERVER',   variable_get('xmpp_api_adminjid_server', ''));
define('XMPP_API_PROCESS_TIMEOUT',   variable_get('xmpp_api_process_timeout', 2));

/**
 * Implementation of hook_xmpp()
 *
 * @param $op
 *      The operation that is being requested
 */
function xmpp_api_xmpp($op = 'info') {
  switch ($op) {
    case 'info':
      $info['xmpp_api'] = array(
        'name'        => t('XMPP API'),
        'operation'   => 'xmpp_api_operation',
        'description' => t('Utilize pure XMPP API via XMPPPHP'),
      );
      return $info;
  }
}

/**
 * Implementation of hook_help().
 */
function xmpp_api_help($path, $arg) {
  $output = '';
  switch ($path) {
    case 'admin/modules#name':
      $output = t('xmpp_api');
      break;
    case 'admin/modules#description':
      $output = t('Provides an XMPP API for the Drupal framework');
      break;
    case 'admin/help#xmpp_api':
      $output = '<p>'. t('The xmpp_api module provides an xmpp api for use by drupal') .'</p>';
      break;
  }
  return $output;
}

/**
 * Implementation of hook_perm()
 */
function xmpp_api_perm() {
  return array('administer xmpp api');
}

/**
 * Implementation of hook_menu()
 */
function xmpp_api_menu() {
  $items['admin/xmppframework/xmpp_api'] = array(
    'title'            => 'XMPP API Settings',
    'description'      => 'Configure the xmpp api module',
    'page callback'    => 'drupal_get_form',
    'page arguments'   => array('xmpp_api_admin_settings'),
    'access arguments' => array('administer xmpp api'),
  );
  return $items;
}

/**
 * Function used to display the admin screen for the module
 */
function xmpp_api_admin_settings() {
  $form['settings'] = array('#type' => 'fieldset', '#title' => t('XMPP API Settings'), '#collapsible' => TRUE, '#collapsed' => FALSE);
  $form['settings']['xmpp_api_server'] = array(
    '#type'          => 'textfield',
    '#title'         => t('XMPP Server'),
    '#default_value' => XMPP_API_SERVER,
    '#size'          => 50,
    '#maxlength'     => 255,
    '#description'   => t('Server where xmpp requests will be sent'),
  );
  $form['settings']['xmpp_api_port'] = array(
    '#type'          => 'textfield',
    '#title'         => t('XMPP Port'),
    '#default_value' => XMPP_API_PORT,
    '#size'          => 20,
    '#maxlength'     => 5,
    '#description'   => t('Port where xmpp requests will be sent'),
  );
  $form['settings']['xmpp_api_adminjid'] = array(
    '#type'          => 'textfield',
    '#title'         => t('Admin JID'),
    '#default_value' => XMPP_API_ADMINJID,
    '#size'          => 20,
    '#description'   => t('JID with administration priviledges on the server for using XEP-0133'),
  );
  $form['settings']['xmpp_api_adminjid_password'] = array(
    '#type'          => 'password',
    '#title'         => t('Admin JID Password'),
    '#default_value' => XMPP_API_ADMINJID_PASSWORD,
    '#size'          => 20,
    '#description'   => t('Admin JID password for accessing that account on the server'),
  );
  $form['settings']['xmpp_api_adminjid_server'] = array(
    '#type'          => 'textfield',
    '#title'         => t('Admin JID Server'),
    '#default_value' => XMPP_API_ADMINJID_SERVER,
    '#size'          => 20,
    '#description'   => t('Admin JID server which we will be connecting too as the domain'),
  );
  return system_settings_form($form);
}

/**
 * Operation function
 *
 * @param $op
 *      Operation we will perform
 */
function xmpp_api_operation($op) {
  $funcs = array(
    'send_message' => 'xmpp_api_send_message',
    'delete_account' => 'xmpp_api_delete_account',
    'create_muc' => 'xmpp_api_create_muc',
    'configure_muc' => 'xmpp_api_configure_muc',
    'delete_muc' => 'xmpp_api_delete_muc',
    'add_rosteritem' => 'xmpp_api_add_rosteritem',
    'delete_rosteritem' => 'xmpp_api_delete_rosteritem',
    'get_vcard' => 'xmpp_api_get_vcard',
    'set_vcard' => 'xmpp_api_set_vcard',
    'get_roster' => 'xmpp_api_get_roster',
    'get_user_resources' => 'xmpp_api_get_user_resources',
  );
  return $funcs[$op];
}

/**
 * Sending a message via XMPP
 *
 * @param $to
 *      Jid of person receiving the message
 * @param $type
 *      XMPP Type of message
 * @param $body
 *      Body text of message
 * @param $subject
 *      Subject of the message
 */
function xmpp_api_send_message($to, $type = 'chat', $body = null, $subject = null) {
  // connect to the server, send the message and disconnect from the server
  $conn = _xmpp_api_connect();
  $conn->message($to, $body, $type, $subject);
  _xmpp_api_disconnect($conn);
  return true;
}

/**
 * Deleting user account via XMPP
 *
 * @param $name
 *      User Name
 * @param $host
 *      Server
 * @param $password
 *      User Password
 */
function xmpp_api_delete_account($name, $host, $password) {
  // TODO: will have to look at the admin interface via XEP-0133
  if (!strlen(XMPP_API_ADMINJID) || !strlen(XMPP_API_ADMINJID_PASSWORD)) {
    watchdog('xmpp_api', t('Admin JID or Password is not set for server administration'), WATCHDOG_ERROR);
    return false;
  }

  $jid = $name .'@'. $host;
  // connecting to the server, deleting the roster item and disconnecting from the server
  $conn = _xmpp_api_connect(XMPP_API_ADMINJID, XMPP_API_ADMINJID_PASSWORD);

  // sending delete user form per XEP-0133 specification so we can retrieve the information
  $conn->deleteUserForm($host);
  $payload = $conn->processUntil('form_returned', XMPP_API_PROCESS_TIMEOUT);

  $packet = $payload[0][1];
  // checking if the packet is an array or not
  if (!is_array($packet)) {
    _xmpp_api_disconnect($conn);
    watchdog('xmpp_api', t('@name does not have the correct privileges to perform server administration via ad-hoc commands', array('@name' => XMPP_API_ADMINJID)), WATCHDOG_ERROR);
    return false;
  }
  // setting the user name we wish to delete from the server
  $packet['accountjids']['data'] = $jid;
  $conn->deleteUser($packet);
  $payload = $conn->processUntil('user_deleted', XMPP_API_PROCESS_TIMEOUT);
  // disconnecting from the xmpp server
  _xmpp_api_disconnect($conn);
  // error occurred while setting the user name
  if ($payload[0][1] != 'result') {
    watchdog('xmpp_api', t('Error occurred while removing the user account'), WATCHDOG_ERROR);
    return false;
  }

  return true;
}

/**
 * Creating muc via XMPP
 *
 * @param $name
 *      The name of the muc being created
 * @param $service
 *      The conference server the muc will be created on
 * @param $server
 *      The server the muc will be created on
 * @param $title
 *      The description name for the room
 */
function xmpp_api_create_muc($name, $service, $server, $title) {
  // implemented via XEP-0045 for the creation of the room
  if (!strlen(XMPP_API_ADMINJID) || !strlen(XMPP_API_ADMINJID_PASSWORD)) {
    watchdog('xmpp_api', t('Admin JID or Password is not set for server administration'), WATCHDOG_ERROR);
    return false;
  }
  // connecting to the xmpp server
  $conn = _xmpp_api_connect(XMPP_API_ADMINJID, XMPP_API_ADMINJID_PASSWORD);

  // setting the room including nickname we will utilize
  $room = $name .'@'. $service .'/xwchat-drupal';

  // sending the initial presence to the room so we can create it
  $conn->sendInitialRoomPresence($room);
  $payload = $conn->processUntil('initial_room_enter', XMPP_API_PROCESS_TIMEOUT);
  if ($payload[0][1] != 'result') {
    _xmpp_api_disconnect($conn);
    watchdog('xmpp_api', t('@name does not have privileges to create muc rooms', array('@name' => XMPP_API_ADMINJID)), WATCHDOG_ERROR);
    return false;
  }

  // resetting the room variable this time without the nickname on it
  $room = $name .'@'. $service;
  // sending request for the form in order to configure the room and receiving processed contents in return
  $conn->createMucRoom($room);
  $payload = $conn->processUntil('muc_created', XMPP_API_PROCESS_TIMEOUT);
  $packet = $payload[0][1];
  // if we are not returned an array we know there was an error in the configuration
  if (!is_array($packet)) {
    _xmpp_api_disconnect($conn);
    watchdog('xmpp_api', t('@name does not have privileges to configure muc rooms', array('@name' => XMPP_API_ADMINJID)), WATCHDOG_ERROR);
    return false;
  }

  // have pre-determined options that we want to set the muc as i.e. title, persistent etc
  $options = _xmpp_api_muc_config_options($title);
  foreach ($packet as $key => $values) {
    if (array_key_exists($key, $options)) {
      $values['data'] = $options[$key];
    }
  }
  // sending request to configure the room with our pertinent information set
  $conn->createMucRoomFormSend($room, $packet);
  $payload = $conn->processUntil('muc_configured', XMPP_API_PROCESS_TIMEOUT);
  // disconnect from the xmpp server
  _xmpp_api_disconnect($conn);

  if ($payload[0][1] != 'result') {
    watchdog('xmpp_api', t('Configuration options specified by the user are unacceptable to the room'), WATCHDOG_ERROR);
    return false;
  }

  return true;
}

/**
 * Configuring muc via XMPP
 */
function xmpp_api_configure_muc($name, $service, $server, $title) {
  // implemented via XEP-0045 for the creation of the room
  if (!strlen(XMPP_API_ADMINJID) || !strlen(XMPP_API_ADMINJID_PASSWORD)) {
    watchdog('xmpp_api', t('Admin JID or Password is not set for server administration'), WATCHDOG_ERROR);
    return false;
  }
  // connecting to the xmpp server
  $conn = _xmpp_api_connect(XMPP_API_ADMINJID, XMPP_API_ADMINJID_PASSWORD);

  // setting the room information regarding the muc
  $room = $name .'@'. $service;
  // sending request for the form in order to configure the room and receiving processed contents in return
  // note at this point it will not create the room since it it should already exist in the system
  $conn->createMucRoom($room);
  $payload = $conn->processUntil('muc_created', XMPP_API_PROCESS_TIMEOUT);
  $packet = $payload[0][1];
  // if we are not returned an array we know there was an error in the configuration
  if (!is_array($packet)) {
    _xmpp_api_disconnect($conn);
    watchdog('xmpp_api', t('@name does not have privileges to configure muc rooms', array('@name' => XMPP_API_ADMINJID)), WATCHDOG_ERROR);
    return false;
  }
  // have pre-determined options that we want to set the muc as i.e. title, persistent etc
  $options = _xmpp_api_muc_config_options($title);
  foreach ($packet as $key => $values) {
    if (array_key_exists($key, $options)) {
      $values['data'] = $options[$key];
    }
  }
  // sending request to configure the room with our pertinent information set
  $conn->createMucRoomFormSend($room, $packet);
  $conn->processUntil('muc_configured', XMPP_API_PROCESS_TIMEOUT);

  // disconnect from the xmpp server
  _xmpp_api_disconnect($conn);
  if ($payload[0][1] != 'result') {
    watchdog('xmpp_api', t('Configuration options specified by the user are unacceptable to the room'), WATCHDOG_ERROR);
    return false;
  }

  return true;
}


/**
 * Deleting muc via XMPP
 *
 * @param $name
 *      The name of the muc being deleted
 * @param $service
 *      The conference server the muc will be removed from
 * @param $server
 *      The server the muc will be removed from
 */
function xmpp_api_delete_muc($name, $service, $server) {
  // implemented via XEP-0045 for the removal of the room
  if (!strlen(XMPP_API_ADMINJID) || !strlen(XMPP_API_ADMINJID_PASSWORD)) {
    watchdog('xmpp_api', t('Admin JID or Password is not set for server administration'), WATCHDOG_ERROR);
    return false;
  }
  // connecting to the xmpp server
  $conn = _xmpp_api_connect(XMPP_API_ADMINJID, XMPP_API_ADMINJID_PASSWORD);

  // setting the room variable with full service information then sending delete packet
  $room = $name .'@'. $service;
  $conn->removeMucRoom($room, t('Removal via xmpp api drupal'));
  $payload = $conn->processUntil('muc_removed', XMPP_API_PROCESS_TIMEOUT);
  // disconnect from the xmpp server
  _xmpp_api_disconnect($conn);
  if ($payload[0][1] != 'result') {
    watchdog('xmpp_api', t('MUC could not be removed from the xmpp server'), WATCHDOG_ERROR);
    return false;
  }
  watchdog('xmpp_api', t('MUC successfully removed from the xmpp server'), WATCHDOG_NOTICE);
  return true;
}

/**
 * Adding roster item via XMPP
 *
 * @param $uname
 *      XMPP User name
 * @param $userver
 *      XMPP User server
 * @param $cname
 *      Contact name
 * @param $cserver
 *      Contact server
 * @param $nick
 *      Nickname for contact
 * @param $group
 *      Group for contact
 * @param $subscription
 *      Subscription i.e. both, to, from, none
 */
function xmpp_api_add_rosteritem($uname, $userver, $cname, $cserver, $nick, $group, $subscription) {
  if (!$cname || !$cserver) {
    watchdog('xmppframework', t('Contact name or server not received'), WATCHDOG_ERROR);
    return false;
  }
  // setting the jid of the contact we will add to our roster
  $jid = $cname .'@'.$cserver;
  if (!$nick) { $nick = $jid; }
  // connecting to the server, deleting the roster item and disconnecting from the server
  $conn = _xmpp_api_connect();
  $conn->presence(); // sending presence packet
  $conn->addRosterContact($jid, $nick, array($group));
  $payload = $conn->processUntil('contact_added', XMPP_API_PROCESS_TIMEOUT);
  // doing error checking to make sure the contact was loaded
  if ($payload[0][1] != 'result') {
    watchdog('xmpp_api', t('Could not add user @jid to the roster, error occurred', array('@jid' => $jid)), WATCHDOG_ERROR);
    _xmpp_api_disconnect($conn);
    return false;
  }

  // now send the subscribe presence otherwise we wont have any subscription
  $conn->presence(NULL, NULL, $jid, 'subscribe');
  _xmpp_api_disconnect($conn);
  return true;
}

/**
 * Deleting roster item via XMPP
 *
 * @param $uname
 *      XMPP User name
 * @param $userver
 *      XMPP User server
 * @param $cname
 *      Contact name
 * @param $cserver
 *      Contact server
 */
function xmpp_api_delete_rosteritem($uname, $userver, $cname, $cserver) {
  if (!$cname || !$cserver) {
    watchdog('xmppframework', t('Contact name or server not received'), WATCHDOG_ERROR);
    return false;
  }
  // setting the jid of the contact we will remove from our roster
  $jid = $cname .'@'. $cserver;
  // connecting to the server, deleting the roster item and disconnecting from the server
  $conn = _xmpp_api_connect();
  $conn->presence(); // sending presence packet
  $conn->deleteRosterContact($jid);
  $payload = $conn->processUntil('contact_removed', XMPP_API_PROCESS_TIMEOUT);
  _xmpp_api_disconnect($conn);

  // error checking to make sure the packet returned was not an error packet
  if ($payload[0][1] != 'result') {
    watchdog('xmpp_api', t('Error while trying to delete roster item: @jid', array('@jid' => $jid)), WATCHDOG_ERROR);
    return false;
  }
  return true;
}

/**
 * Retrieve the users vcard via XMPP
 *
 * @param $user
 *      If not null will retrieve this users account
 */
function xmpp_api_get_vcard($user = NULL) {
  // check if the user has a username and password
  $jid = ($user->xmppclient['jid']) ? $user->xmppclient['jid'] : NULL;
  $pass = ($user->xmppclient['password']) ? __xmppclient_password($user->xmppclient['password'], TRUE) : NULL;

  $conn = _xmpp_api_connect($jid, $pass);
  $conn->getVCard();
  $packet = $conn->processUntil('vcard_received', XMPP_API_PROCESS_TIMEOUT);
  _xmpp_api_disconnect($conn);
  if (!is_array($packet[0][1])) {
    watchdog('xmpp_api', t('Could not retrieve users vcard from the xmpp server'), WATCHDOG_ERROR);
    return false;
  }

  return $packet[0][1];
}

/**
 * Send the users vcard via XMPP
 */
function xmpp_api_set_vcard($vcard = array()) {
  global $user;
  $conn = _xmpp_api_connect();
  $conn->sendVCard($vcard);
  $payload = $conn->processUntil('vcard_saved', XMPP_API_PROCESS_TIMEOUT);
  _xmpp_api_disconnect($conn);

  // checking for errors that might have occurred
  if ($payload[0][1] != 'result') {
    watchdog('xmpp_api', t('Could not set @name vcard, error occurred', array('@name' => $user->xmppclient['jid'])), WATCHDOG_ERROR);
    return false;
  }
  return true;
}

/**
 * Retrieve a users roster
 *
 * @param $user
 *      User object
 */
function xmpp_api_get_roster($user = NULL) {
  // check if the user has a username and password
  $jid = ($user->xmppclient['jid']) ? $user->xmppclient['jid'] : NULL;
  $pass = ($user->xmppclient['password']) ? __xmppclient_password($user->xmppclient['password'], TRUE) : NULL;

  $conn = _xmpp_api_connect($jid, $pass);
  $conn->getRoster();
  $packet = $conn->processUntil('roster_received', XMPP_API_PROCESS_TIMEOUT);
  _xmpp_api_disconnect($conn);

  // error checking to make sure we receive the roster and not an error
  if (!is_array($packet[0][1])) {
    watchdog('xmpp_api', t('Could not retrieve the users roster from the system'), WATCHDOG_ERROR);
    return false;
  }
  return $packet[0][1];
}

/**
 * Retrieve the number of online resources for a user
 *
 * @param $user
 *      User object
 */
function xmpp_api_get_user_resources($user = NULL) {
  if (!$user) {
    global $user;
  }
  // going based off the database information currently since need to write the ejabberd piece for it using pure api
  if ($user->xmppclient['status'] && $user->xmppclient['status'] == 'available') {
    return 1;
  }
  return 0;
}

/***********************************************************************************************************
 * INTERNAL FUNCTIONS
 ***********************************************************************************************************/

/**
 * Builds the XMPP Connection Object
 *
 * @param $jid
 *      Optional admin jid
 * @param $password
 *      Optional admin password
 *
 * @return $conn
 *      XMPP Connection Object
 */
function _xmpp_api_build_conn($jid = NULL, $password = NULL) {
  // if we received a username and password use them to log
  if ($jid && $password) {
    $pieces = explode('@', $jid);
    $username = $pieces[0];
    $server = $pieces[1];
    $resource = 'drupal-server';
  }
  else {
    // no username or password received so use the global user
    global $user;
    $username = $user->xmppclient['user_name'];
    $password = __xmppclient_password($user->xmppclient['password'], TRUE);
    $server = $user->xmppclient['server'];
    $resource = $user->xmppclient['resource'];
  }
  $conn = new XMPPHP_XMPP(XMPP_API_SERVER, XMPP_API_PORT, $username, $password, $resource, $server, $printlog=false, $loglevel=XMPPHP_Log::LEVEL_VERBOSE);
  $conn->autoSubscribe();
  return $conn;
}

/**
 * Connect to the XMPP server and return the connection
 *
 * @param $jid
 *      Optional admin jid
 * @param $password
 *      Optional admin password
 *
 * @return $conn
 *      XMPP Connection Object
 */
function _xmpp_api_connect($jid = NULL, $password = NULL) {
  // when we are doing the connect make sure at this point we load the XMPPHP file
  module_load_include('php', 'xmpp_api', 'vendor/XMPPHP/XMPP');

  $conn = _xmpp_api_build_conn($jid, $password);
  $conn->connect();
  $conn->processUntil('session_start');
  return $conn;
}

/**
 * Disconnect from the xmpp server
 *
 * @param $conn
 *      XMPP Connection Object
 */
function _xmpp_api_disconnect($conn) {
  $conn->disconnect();
}

/**
 * Returns pre-defined muc configuration options
 *
 * @param $title
 *      Description title for the muc room
 */
function _xmpp_api_muc_config_options($title) {
  return array(
    'muc#roomconfig_roomname' => $title,
    'muc#roomconfig_persistentroom' => 1,
    'muc#roomconfig_publicroom' => 1,
    'public_list' => 1,
    'muc#roomconfig_changesubject' => 1,
    'allow_private_messages' => 1,
    'allow_query_users' => 1,
    'muc#roomconfig_allowinvites' => 1,
  );
}
