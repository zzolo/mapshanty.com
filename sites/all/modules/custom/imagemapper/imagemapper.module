<?php
// $Id$
/**
 * @file
 * Main module file for the Image Mapper Module
 *
 * @notes
 *
 * @todo
 */
 

/**
 * Implementation of hook_help().
 */
function imagemapper_help($page, $arg) {
  switch ($page) {
    case 'admin/help#imagemapper':
      return t('Create a Views Style Plugin for a GMap that uses an ImageField for markers.');
    break;
  }
}


/**
 * Implementation of hook_perm().
 */
function imagemapper_perm() {
  return array('administer imagemapper');
}
 
 
/**
 * Implementation of hook_menu
 */
function imagemapper_menu() {
  $items['admin/settings/imagemapper'] = array(
    'title' => 'Image Mapper Settings',
    'description' => 'Configure Image Mapper',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('imagemapper_admin_setting'),
    'access arguments' => array('administer imagemapper'),
    'file' => 'imagemapper.admin.inc'
  );

  return $items;
}


/**
 * Implementation of hook_views_api().
 */
function imagemapper_views_api() {
  return array(
    'api' => '2.0',
  );
}


/**
 * Implementation of hook_views_plugins().
 */
function imagemapper_views_plugins() {
  return array(
    'module' => 'imagemapper',
    'style' => array(
      'imagemapper' => array(
        'title' => t('GMap Image Mapper'),
        'help' => t('Display rows as a map with dynamic markers from an image field.'),
        'handler' => 'imagemapper_plugin_style_imagemapper',
        'theme' => 'imagemapper_view_imagemapper',
        'use ajax' => true,
        'uses options' => true,
        'type' => 'normal',
        'uses row plugins' => true,
        'uses fields' => true,
      ),
    ),
  );
}


/**
 * Implementation of hook_theme().
 */
function imagemapper_theme() {
  return array(
    'imagemapper_view_imagemapper' => array(
      'arguments' => array('element'),
    ),
  );
}


/**
 * Implementation of hook_gmap().
 */
function imagemapper_gmap($op, &$map) {
  switch ($op) {
    case 'pre_theme_map':
      // Add js
      // TODO, only add when necessary
      drupal_add_js(drupal_get_path('module', 'imagemapper').'/imagemapper.js');
      break;
    case 'parse_macro':
      break;
  }
}


/**
 * Function to get ImageCache Presets
 */
function imagemapper_get_image_cache_presets() {
  static $presets = array();
  // Check for Imagecache Presets
  if (empty($presets)) {
    if (module_exists('imagecache')) {
      $presets[0] = t('--none--');
      $result = db_query('SELECT * FROM {imagecache_preset} ORDER BY presetname');
      while ($preset = db_fetch_array($result)) {
        $presets[$preset['presetid']] = $preset['presetname'];
      }
    }
  }
  return $presets;
}