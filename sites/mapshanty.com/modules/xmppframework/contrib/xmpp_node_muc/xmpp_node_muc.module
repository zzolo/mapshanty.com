<?php
// $Id: xmpp_node_muc.module,v 1.1 2008/10/02 20:57:52 darrenferguson Exp $

/**
 * @file
 * Module providing an XMPP MUCS for Drupal Nodes
 */

define('XMPP_NODE_MUC_PATH',            drupal_get_path('module', 'xmpp_node_muc'));
define('XMPP_NODE_MUC_XMPPCLIENT_PATH', drupal_get_path('module', 'xmppclient')); // path for the xmppclient module so we can use the xwchat client
// utilized for the block mechanizm
define('XMPP_NODE_MUC_BLOCK_MUC_LOG_AMOUNT',    variable_get('xmpp_node_muc_block_muc_log_amount', 3)); // the amount of logs we will show on the block
define('XMPP_NODE_MUC_DATE_FORMAT',             variable_get('user_profile_date_format', 'small')); // determine the format for the date to be used
define('XMPP_NODE_MUC_BLOCK_REFRESH',           variable_get('xmpp_node_muc_block_refresh', false)); // block ajax refreshing (true = on, false = off)
define('XMPP_NODE_MUC_BLOCK_REFRESH_INTERVAL',  variable_get('xmpp_node_muc_block_refresh_interval', 60000)); // block refresh interval in milliseconds
// if this is set to true it will be shown on all og pages otherwise it will only be shown on the node/nid page
define('XMPP_NODE_MUC_BLOCK_SHOW_ALL_OG_PAGES', variable_get('xmpp_node_muc_block_show_all_og_pages', false));
// variables utilized to determine node type
define('XMPP_NODE_MUC_TEMPORARY', 0);
define('XMPP_NODE_MUC_PERMANENT', 1);
define('XMPP_NODE_MUC_UNKNOWN', 2);

/**
 * Implementation of hook_help().
 */
function xmpp_node_muc_help($path, $arg) {
  $output = '';
  switch ($path) {
    case 'admin/modules#name':
      $output = t('xmpp_node_muc');
      break;
    case 'admin/modules#description':
      $output = t('Provides the ability to associate mucs with a node');
      break;
    case 'admin/help#xmpp_node_muc':
      $output = '<p>'. t('The xmpp_node_muc module allows you to associate mucs with a node') .'</p>';
      break;
  }
  return $output;
}

/**
 * Implementation of hook_init()
 */
function xmpp_node_muc_init() {
  drupal_add_css(XMPP_NODE_MUC_PATH .'/xmpp_node_muc.css');
  drupal_add_js(XMPP_NODE_MUC_PATH .'/xmpp_node_muc.js');
}

/**
 * Implementation of hook_perm()
 */
function xmpp_node_muc_perm() {
  return array('administer xmpp_node_muc', 'xmpp node muc associate');
}

/**
 * Implementation of hook_block()
 */
function xmpp_node_muc_block($op = 'list', $delta = 0, $edit = array()) {
  switch ($op) {
    case 'list':
      $block = array(
        'xmpp_node_muc_room' => array('info' => t('XMPP_NODE_MUC: Room chat transcript')),
      );
      break;
    case 'view':
      switch ($delta) {
        case 'xmpp_node_muc_room':
          $block = xmpp_node_muc_block_chat_transcript();
          break;
      }
  }
  return $block;
}

/**
 * Implementation of hook_theme()
 */
function xmpp_node_muc_theme() {
  return array(
    'xmpp_node_muc_block_temporary' => array(
      'arguments' => array('node' => NULL),
      'file' => 'xmpp_node_muc.theme.inc'
    ),
    'xmpp_node_muc_block_permanent' => array(
      'arguments' => array('node' => NULL),
      'file' => 'xmpp_node_muc.theme.inc'
    ),
  );
}

/**
 * Implementation of hook_xmlrpc()
 */
function xmpp_node_muc_xmlrpc() {
  module_load_include('inc', 'xmpp_node_muc', 'xmpp_node_muc_xmlrpc');
  return array(
    array(
      'xmpp_node_muc.room_presence_update',
      'xmpp_node_muc_xmlrpc_room_presence_update',
      array('boolean', 'string', 'string', 'string', 'string', 'string'),
      t('User has entered the chat room.')),
    array(
      'xmpp_node_muc.room_log',
      'xmpp_node_muc_xmlrpc_room_log',
      array('boolean', 'string', 'string', 'string', 'string'),
      t('Room Statistics.')),
  );
}

/**
 * Implementation of hook_menu()
 */
function xmpp_node_muc_menu() {
  $items['admin/xmppframework/node_muc'] = array(
    'title'            => 'Node MUC',
    'description'      => 'Configure the xmpp node muc module',
    'page callback'    => 'drupal_get_form',
    'page arguments'   => array('xmpp_node_muc_admin_settings'),
    'access arguments' => array('administer xmpp_node_muc'),
    'file'             => 'xmpp_node_muc.admin.inc',
  );

  // the below three are ajax call menu item paths so we return information to the screen
  $items['xmpp_node_muc/launch'] = array(
    'title'            => 'Launch MUC for this group',
    'page callback'    => 'xmpp_node_muc_launch',
    'access arguments' => array('xmpp node muc associate'),
    'type'             => MENU_CALLBACK,
  );
  $items['xmpp_node_muc/block_refresh/temporary'] = array(
    'title'            => 'Refresh Temporary MUC Block',
    'page callback'    => 'xmpp_node_muc_block_refresh_temporary',
    'access arguments' => array('xmpp node muc associate'),
    'type'             => MENU_CALLBACK,
  );
  $items['xmpp_node_muc/block_refresh/permanent'] = array(
    'title'            => 'Refresh Permanent MUC Block',
    'page callback'    => 'xmpp_node_muc_block_refresh_permanent',
    'access arguments' => array('xmpp node muc associate'),
    'type'             => MENU_CALLBACK,
  );

  // for permanent nodes where we create sub groups for them if necessary
  $items['node/%node/mucs'] = array(
    'title'            => 'mucs',
    'page callback'    => 'xmpp_node_muc_list_mucs',
    'page arguments'   => array(1),
    'access callback'  => 'xmpp_node_muc_determine_access',
    'access arguments' => array('update', 1),
    'type'             => MENU_CALLBACK,
    'weight'           => 9,
    'file'             => 'xmpp_node_muc.page.inc',
  );
  $items['node/%node/create_muc'] = array(
    'title'            => 'create muc',
    'page callback'    => 'drupal_get_form',
    'page arguments'   => array('xmpp_node_muc_create'),
    'access callback'  => 'xmpp_node_muc_determine_access',
    'access arguments' => array('update', 1),
    'type'             => MENU_CALLBACK,
    'file'             => 'xmpp_node_muc.page.inc',
  );
  $items['node/%node/edit_muc/%'] = array(
    'title'            => 'edit muc',
    'page callback'    => 'xmpp_node_muc_edit',
    'page arguments'   => array(1, 3),
    'access callback'  => 'xmpp_node_muc_determine_access',
    'access arguments' => array('update', 1),
    'type'             => MENU_CALLBACK,
    'file'             => 'xmpp_node_muc.page.inc',
  );
  $items['node/%node/delete_muc/%'] = array(
    'title'            => 'delete muc',
    'page callback'    => 'xmpp_node_muc_delete',
    'page arguments'   => array(1, 3),
    'access callback'  => 'xmpp_node_muc_determine_access',
    'access arguments' => array('update', 1),
    'type'             => MENU_CALLBACK,
    'file'             => 'xmpp_node_muc.page.inc',
  );
  $items['node/%node/conversations'] = array(
    'title'            => 'Conversations',
    'page callback'    => 'xmpp_node_muc_temporary_conversation_list',
    'page arguments'   => array(1),
    'access callback'  => 'xmpp_node_muc_temporary_access',
    'access arguments' => array(1),
    'type'             => MENU_LOCAL_TASK,
    'file'             => 'xmpp_node_muc.page.inc',
  );
  $items['node/%node/conversation/%'] = array(
    'title'            => 'Conversation Log',
    'page callback'    => 'xmpp_node_muc_temporary_conversation',
    'page arguments'   => array(1, 3),
    'access callback'  => 'xmpp_node_muc_temporary_access',
    'access arguments' => array(1),
    'type'             => MENU_CALLBACK,
    'file'             => 'xmpp_node_muc.page.inc',
  );
  return $items;
}

/**
 * Implementation of hook_nodeapi()
 */
function xmpp_node_muc_nodeapi(&$node, $op, $a3 = NULL, $a4 = NULL) {
  if ($op == 'insert' && xmpp_node_muc_type($node->type) == XMPP_NODE_MUC_PERMANENT) {
    xmpp_node_muc_create_muc($node, 0);
  }

  if ($op == 'delete' && xmpp_node_muc_type($node->type) == XMPP_NODE_MUC_PERMANENT) {
    xmpp_node_muc_delete_muc($node, NULL);
  }

  if ($op == 'update' && xmpp_node_muc_type($node->type) == XMPP_NODE_MUC_PERMANENT) {
    xmpp_node_muc_update_muc($node);
  }
}

/**
 * Implementation of hook_link()
 */
function xmpp_node_muc_link($type, $node = NULL, $teaser = FALSE) {
  global $user;
  $links = array();
  // allow link if they have permissions and type is node and the user is logged in
  if (user_access('xmpp node muc associate') &&
      $type == 'node' &&
      $user->uid &&
      xmpp_node_muc_type($node->type) != XMPP_NODE_MUC_UNKNOWN) {
    // determine if the node is a type designated as an og if it is then check
    // if the user is in the group, if not then we return the links array empty
    if (!(_xmpp_node_muc_og_user_check($node, $user))) {
      return $links;
    }

    // since we will create mucs automatically for the types with permanent mucs we do not need to do any further processing here
    if (db_result(db_query("SELECT COUNT(*) FROM {xmpp_node_muc_groups} WHERE nid = %d", $node->nid))) {
      $title = t('Join MUC');
    }
    else {
      $title = t('Create MUC');
    }
    $url = url('xmpp_node_muc/launch'); // ajax url we will utilize to launch the muc
    $links['xmpp_node_muc'] = array(
      'title' => $title,
      'html' => TRUE,
      'href' => '#',
      'attributes' => array('nid' => $node->nid, 'url' => $url),
    );
  }
  return $links;
}

/**
 * Implementation of hook_footer()
 */
function xmpp_node_muc_footer($main = 0) {
  $output = '<div class="xmpp_node_muc_msg_alert"></div>';
  return $output;
}

/*********************************************************************************************************
 * MENU ACCESS PERMISSION CHECK FUNCTION
 *********************************************************************************************************/

/**
 * The reason for this function is to make sure the MUC link and actions are only available to permanent
 * node types since we do not wish to implement a hierarchy for the temporary nodes
 *
 * @param $action
 *      Action that will be performed on the node
 * @param $node
 *      The node we are currently working on
 */
function xmpp_node_muc_determine_access($action, $node) {
  if (xmpp_node_muc_type($node->type) == XMPP_NODE_MUC_PERMANENT && node_access($action, $node)) {
    return TRUE;
  }
  return FALSE;
}

/**
 * The reason for this function is to make sure the conversations link is only available to the temporary
 * node and that the permanent nodes will not get this link
 *
 * @param $node
 *      The node we are currently working on
 */
function xmpp_node_muc_temporary_access($node) {
  if (xmpp_node_muc_type($node->type) == XMPP_NODE_MUC_TEMPORARY) {
    return TRUE;
  }
  return FALSE;
}

/*********************************************************************************************************
 * BLOCK FUNCTIONS
 *********************************************************************************************************/

function xmpp_node_muc_block_chat_transcript() {
  // determine if we are actually viewing a node, if so load the node then check if the type is allowed
  if (is_numeric(arg(1)) &&
      ($node = node_load(arg(1))) &&
      xmpp_node_muc_type($node->type) != XMPP_NODE_MUC_UNKNOWN) {
    // check put in to only show the block on the main og page
    if (!XMPP_NODE_MUC_BLOCK_SHOW_ALL_OG_PAGES) {
      if (function_exists('og_is_group_type') && og_is_group_type($node->type) && arg(2)) {
        return array();
      }
    }
    $block['subject'] = t('%title Chat Transcripts', array('%title' => $node->title));
    // determine whether to show the temporary or permanent block depending on the type
    if (xmpp_node_muc_type($node->type) == XMPP_NODE_MUC_TEMPORARY) {
      $block['content'] = theme('xmpp_node_muc_block_temporary', $node);
    }
    else {
      $block['content'] = theme('xmpp_node_muc_block_permanent', $node);
    }
  }
  return $block;
}

/*********************************************************************************************************
 * FUNCTIONS
 *********************************************************************************************************/

/**
 * @param $type
 *      The type we are checking against
 */
function xmpp_node_muc_type($type) {
  $array = variable_get('xmpp_node_muc_types_temporary', array());
  if (isset($array[$type]) && $array[$type]) {
    return XMPP_NODE_MUC_TEMPORARY;
  }
  $array = variable_get('xmpp_node_muc_types_permanent', array());
  if (isset($array[$type]) && $array[$type]) {
    return XMPP_NODE_MUC_PERMANENT;
  }
  return XMPP_NODE_MUC_UNKNOWN;
}

/*********************************************************************************************************
 * AJAX FUNCTIONS
 *********************************************************************************************************/

/**
 * Handle creation of the muc
 *
 * @param $nid
 *      The node id we wish to launch the muc for
 */
function xmpp_node_muc_launch($nid) {
  global $user;

  $node = node_load($nid);
  // we already have a group for the node hence we can just put them into it
  if (_xmpp_node_muc_count_mucs_from_nid($nid)) {
    $group = _xmpp_node_muc_group_toplevel($nid);
    $output = __xmppclient_build_join_muc_js('Drupal.xmpp_node_muc.group_chat', $group->title);
    // if this is going to be the first person in the group we should insert them into the db
    if (!(_xmpp_node_muc_count_users_from_gid($group->gid))) {
      db_query("INSERT INTO {xmpp_node_muc_users} (gid, nid, uid, jid, nickname, join_time) VALUES (%d, %d, %d, '%s', '%s', %d)", $group->gid, $group->nid, $user->uid, $user->xmppclient['jid'], $nickname, time());
    }
    $output .= 'if (attribute.html() == "'. t('Create MUC') .'") { attribute.html("'. t('Join MUC') .'"); };';
  }
  else {
    if (xmpp_node_muc_type($node->type) == XMPP_NODE_MUC_UNKNOWN) {
      // this is not a configured node type hence we cannot allow this to have a muc created for it
      // this should never get to this piece since the link should not be displayed if the NODE TYPE is unknown
      // more of an insurance type incase someone decides to write their own url for the launch
      $text = '<div class="title">'. t('Node Type Mis-configuration') .'</div>';
      $text .= '<div class="message">'. t('Node Type is not configured for muc association') .'</div>';
      $output = '$(".xmpp_node_muc_msg_alert").html(\''. str_replace("'", "", $text) .'\').show();';
    }
    else {
      $gid = xmpp_node_muc_create_muc($node, 0); // creating the muc on the server since it is not there yet
      $group = _xmpp_node_muc_group_load($gid); // getting the group that we assigned to the muc
      $output = __xmppclient_build_join_muc_js('Drupal.xmpp_node_muc.group_chat', $group->title);
      $nickname = $user->name;
      // adding the user since we know they are about to be put into the muc xmlrpc will take care if additional one comes
      db_query("INSERT INTO {xmpp_node_muc_users} (gid, nid, uid, jid, nickname, join_time) VALUES (%d, %d, %d, '%s', '%s', %d)", $gid, $group->nid, $user->uid, $user->xmppclient['jid'], $nickname, time());
      $output .= 'if (attribute.html() == "'. t('Create MUC') .'") { attribute.html("'. t('Join MUC') .'"); };';
    }
  }
  die($output);
}

/**
 * Handle the ajax refreshing of the temporary muc
 *
 * @param $nid
 *      The Node ID which the block is assigned with temporary mucs
 */
function xmpp_node_muc_block_refresh_temporary($nid) {
  $output = '';
  if (XMPP_NODE_MUC_BLOCK_REFRESH) {
    $result = db_fetch_object(db_query("SELECT * FROM {xmpp_node_muc_groups} WHERE nid = %d", $nid));

    // retrieving all of the xmpp groups associated with this permanent node
    $output .= _xmpp_node_muc_group_list($nid, $result->gid, true);
    // retrieve the number of online users currently using the muc
    $output .= _xmpp_node_muc_online_muc_users($nid, $result->gid, true);
    // retrieve the muc log to be displayed on the screen
    $output .= _xmpp_node_muc_group_muc_log($nid, $result->gid, true);
    // do not display anything if there are no currently active mucs
    if (!(_xmpp_node_muc_count_mucs_from_nid($nid))) {
      $output .= '$(document).ready(function() { $(".xmpp_node_muc_group_list").slideUp(); $(".xmpp_node_muc_online").slideUp(); $(".xmpp_node_muc_activity").slideUp(); $(".block-xmpp_node_muc").slideUp(); });';
      $output .= '$("li.xmpp_node_muc a").html("'. t('Create MUC') .'");';
    }
    else {
      $output .= '$(document).ready(function() { $(".xmpp_node_muc_group_list").slideDown(); $(".xmpp_node_muc_online").slideDown(); $(".xmpp_node_muc_activity").slideDown(); $(".block-xmpp_node_muc").slideDown(); });';
      $output .= '$("li.xmpp_node_muc a").html("'. t('Join MUC') .'");';
    }
  }
  die($output);
}

function xmpp_node_muc_block_refresh_permanent($nid) {
  $output = '';
  if (XMPP_NODE_MUC_BLOCK_REFRESH) {
    $result = db_query("SELECT * FROM {xmpp_node_muc_groups} WHERE nid = %d ORDER BY sub_group ASC", $nid);
    while($row = db_fetch_object($result)) {
      // retrieving all of the xmpp groups associated with this permanent node
      $output = _xmpp_node_muc_group_list($nid, $row->gid, true);
      // retrieve the number of online users currently using the muc
      $output .= _xmpp_node_muc_online_muc_users($nid, $row->gid, true);
      // retrieve the muc log to be displayed on the screen
      $output .= _xmpp_node_muc_group_muc_log($nid, $row->gid, true);
    }
  }
  die($output);
}

/*********************************************************************************************************
 * FORM FUNCTIONS
 *********************************************************************************************************/
/**
 * Handle submission of the muc create form
 */
function xmpp_node_muc_create_submit($form, &$form_state) {
  global $user;

  $nid = $form_state['values']['nid'];
  $server = variable_get('xmpp_node_muc_server', '');
  $service = variable_get('xmpp_node_muc_service', '');
  if (strlen(trim($server)) > 0 && strlen(trim($service)) > 0) {
    // retrieve a new gid for the group
    $gid = _xmpp_node_muc_next_gid(); // retrieve a new gid for the group
    $name = strtolower('muc_'. $nid .'_'. $gid);
    $title = $name .'@'. $service;
    // incase the muc never had a group i.e. existing muc before module created or the muc was
    // removed then we can make sure we create a top level muc for the permanent node type
    $sub_group = (_xmpp_node_muc_count_mucs_from_nid($nid)) ? 1 : 0;
    // add the group to the database so we can manipulate it
    db_query("INSERT INTO {xmpp_node_muc_groups} (gid, nid, title, sub_group, name) VALUES (%d, %d, '%s', %d, '%s')", $gid, $nid, $title, $sub_group, $form_state['values']['name']);
    // create the muc with the pertinent information
    _xmpp_node_muc_create_muc($name, $service, $server, $form_state['values']['name']);
    drupal_set_message(t('!name muc has been created', array('!name' => $form_state['values']['name'])));
  }
  else {
    drupal_set_message(t('No server / service is configured for muc creation. Module mis-configuration.'), 'error');
  }
  drupal_goto('node/'. $nid .'/mucs');
}


/*********************************************************************************************************
 * MUC XMLRPC FUNCTIONS
 *********************************************************************************************************/

/**
 * Handle muc creation including making the xmlrpc request to ejabberd
 *
 * @param $node
 *      The node we are creating the muc for
 * @param $sub_group
 *      Boolean and if sub_group will be extra muc for the group
 */
function xmpp_node_muc_create_muc($node, $sub_group = 0) {
  if (!db_result(db_query("SELECT COUNT(*) FROM {xmpp_node_muc_groups} WHERE nid = %d", $node->nid)) || $sub_group) {
    $server = variable_get('xmpp_node_muc_server', '');
    $service = variable_get('xmpp_node_muc_service', '');

    if (strlen(trim($server)) > 0 && strlen(trim($service)) > 0) {
      $gid = _xmpp_node_muc_next_gid(); // retrieve a new gid for the group
      $name = strtolower('muc_'. $node->nid .'_'. $gid);
      $title = $name .'@'. $service;
      // add the group to the database so we can manipulate it
      db_query("INSERT INTO {xmpp_node_muc_groups} (gid, nid, title, sub_group, name) VALUES (%d, %d, '%s', %d, '%s')", $gid, $node->nid, $title, $sub_group, $name);
      // in this case we want the description name to be the actual name for the server
      _xmpp_node_muc_create_muc($name, $service, $server, $name);
      return $gid;
    }
  }
}

/**
 * @param $node
 *      Node object we are removing the muc from
 * @param $gid
 *      The group you wish to delete if NULL remove all of them
 */
function xmpp_node_muc_delete_muc($node, $gid = NULL) {
  $server = variable_get('xmpp_node_muc_server', '');
  $service = variable_get('xmpp_node_muc_service', '');
  // can only remove if the server is configured correctly otherwise we cannot
  if (strlen(trim($server)) > 0 && strlen(trim($service)) > 0) {
    if ($gid) {
      // single group being removed hence remove just that group
      $group = db_fetch_object(db_query("SELECT * FROM {xmpp_node_muc_groups} WHERE gid = %d", $gid));
      $name = substr($group->title, 0, strpos($group->title, '@'));
      _xmpp_node_muc_delete_muc($name, $service, $server); // actually deleting the muc from the service
      // make sure the group is removed from the database
      db_query("DELETE FROM {xmpp_node_muc_users} WHERE gid = %d", $gid);
      db_query("DELETE FROM {xmpp_node_muc_groups} WHERE gid = %d", $gid);
    }
    else {
      // going through every muc associated with the node so they can be removed from the system
      $result = db_query("SELECT * FROM {xmpp_node_muc_groups} WHERE nid = %d", $node->nid);
      while ($group = db_fetch_object($result)) {
        $name = substr($group->title, 0, strpos($group->title, '@'));
        _xmpp_node_muc_delete_muc($name, $service, $server); // actually deleting the muc from the server
        // make sure the group is removed from the database
        db_query("DELETE FROM {xmpp_node_muc_users} WHERE gid = %d", $group->gid);
        db_query("DELETE FROM {xmpp_node_muc_groups} WHERE gid = %d", $group->gid);
      }
    }
  }
}

/**
 * Function called when an existing node is updated in the system
 */
function xmpp_node_muc_update_muc($node) {
  if ($node->nid) {
    $row = db_fetch_object(db_query("SELECT * FROM {xmpp_node_muc_groups} WHERE nid = %d AND sub_group = 0", $node->nid));
    // if the name has changed, then change the title of the muc on the xmpp server to match
    if (strcmp($node->title, $row->name)) {
      db_query("UPDATE {xmpp_node_muc_groups} SET name = '%s' WHERE nid = %d AND sub_group = 0", $node->title, $node->nid);
      // setting the virtual host and server variables needed by the configure function
      $server = variable_get('xmpp_node_muc_server', '');
      $service = variable_get('xmpp_node_muc_service', '');
      if (strlen(trim($server)) > 0 && strlen(trim($service)) > 0) {
        $name = substr($row->title, 0, strpos($row->title, '@'));
        xmppframework_configure_muc($name, $service, $server, $node->title);
      }
    }
  }
}

/*********************************************************************************************************
 * INTERNAL FUNCTIONS FOR USE ONLY XMPP NODE MUC MODULE
 *********************************************************************************************************/

/**
 * Function determines if the node is an og and if it is determine if the user
 * is a member of the group and hence can actually see the join link or not
 *
 * @param $node
 *      Node Object
 * @param $user
 *      User Object
 */
function _xmpp_node_muc_og_user_check($node, $user) {
  // adding check for the og portion if the og module is available
  // if the node type is a group and the user is not a member then do not show the join
  if (module_exists('og') && function_exists('og_is_group_type')) {
    if (og_is_group_type($node->type)) {
      return og_is_group_member($node, FALSE, $user->uid);
    }
  }
  return TRUE;
}

/**
 * Function returns the next gid that we will utilize
 */
function _xmpp_node_muc_next_gid() {
  $gid = db_result(db_query("SELECT gid FROM {xmpp_node_muc_gid}"));
  $gid++;
  db_query("UPDATE {xmpp_node_muc_gid} SET gid = %d", $gid);
  return $gid;
}

/**
 * @param $name
 *      The name of the muc being created
 * @param $service
 *      The conference server the muc will be created on
 * @param $server
 *      The server the muc will be created on
 * @param $title
 *      The description name for the room
 */
function _xmpp_node_muc_create_muc($name, $service, $server, $title) {
  // creating the muc utilizing the xmppframekwork
  xmppframework_create_muc($name, $service, $server, $title);
}

/**
 * @param $name
 *      The name of the muc being created
 * @param $service
 *      The conference server the muc will be created on
 * @param $server
 *      The server the muc will be created on
 */
function _xmpp_node_muc_delete_muc($name, $service, $server) {
  // deleteing the muc utilizing the xmppframework
  xmppframework_delete_muc($name, $service, $server);
}

/**
 * Function retrieves the top level muc information for the particular node
 *
 * @param $nid
 *      The node id that we wish to get the top level muc
 */
function _xmpp_node_muc_group_toplevel($nid) {
  return db_fetch_object(db_query("SELECT * FROM {xmpp_node_muc_groups} WHERE nid = %d ORDER BY sub_group ASC LIMIT 1", $nid));
}

/**
 * @param $gid
 *      Gid of the group we are wishing to load into the variable
 */
function _xmpp_node_muc_group_load($gid) {
  return db_fetch_object(db_query("SELECT * FROM {xmpp_node_muc_groups} WHERE gid = %d", $gid));
}

/**
 * @param $title
 *      Title of the group we are trying to get the gid for
 */
function _xmpp_node_muc_group_gid($title) {
  return db_result(db_query("SELECT gid FROM {xmpp_node_muc_groups} WHERE title = '%s'", $title));
}

/**
 * @param $nid
 *      Node ID
 */
function _xmpp_node_muc_count_mucs_from_nid($nid) {
  return db_result(db_query("SELECT COUNT(gid) FROM {xmpp_node_muc_groups} WHERE nid = %d", $nid));
}

/**
 * @param $gid
 *      Group ID
 */
function _xmpp_node_muc_count_users_from_gid($gid) {
   return db_result(db_query("SELECT COUNT(gid) FROM {xmpp_node_muc_users} WHERE gid = %d", $gid));
}

/**
 *  @param $fulljid
 *      JID of the person who sent the packet including the resource
 */
function _xmpp_node_muc_uid_from_fulljid($fulljid) {
  if (!module_exists('xmppclient')) {
    return null;
  }

  $jid = trim(substr($fulljid, 0, strpos($fulljid, '/')));
  return db_result(db_query("SELECT uid FROM {xmppclient_user} WHERE jid = '%s'", $jid));
}

/**
 * Function retrieves all of the xmpp groups associated with the organic group
 *
 * @param $nid
 *      Node id of the organic group
 * @param $gid
 *      Group id associated with the Node
 * @param $ajax
 *      Ajax initiated request
 */
function _xmpp_node_muc_group_list($nid, $gid, $ajax = false) {
  global $user;

  if ($ajax) {
    $output = '';
    $result = db_query("SELECT * FROM {xmpp_node_muc_groups} WHERE nid = %d ORDER BY sub_group ASC", $nid);
    while ($row = db_fetch_object($result)) {
      $subject = (strlen($row->subject) > 0) ? $row->subject : 'Not Set';
      $online = db_result(db_query("SELECT 1 FROM {xmpp_node_muc_users} WHERE jid = '%s' AND gid = %d", $user->xmppclient['jid'], $gid));
      $online_status = ($online == 1) ? 'Participating' : 'Not Participating';
      // also making sure the single quotes are replaced since they will break the javascript
      $output .= 'Drupal.xmpp_node_muc.ajax_group_info_refresh(\''. $row->gid .'\', \''. str_replace("'", "", substr($row->title, 0, strpos($row->title, '@'))) .'\', \''. str_replace("'", "", $subject) .'\', \''. str_replace("'", "", $online_status) .'\');';
    }
    // need to add this output if it is a temporary muc since we might have to do screen changes based off the ajax mode
    if ($output == '') {
      $node = node_load($nid);
      if (xmpp_node_muc_type($node->type) == XMPP_NODE_MUC_TEMPORARY) {
        $output .= 'Drupal.xmpp_node_muc.ajax_group_info_refresh(\'\', \'\', \'\', \'\');';
      }
    }
  }
  else {
    $output = '<div id="xmpp_node_muc_group_list_' . $gid .'" class="xmpp_node_muc_group_list">';
    $result = db_fetch_object(db_query("SELECT * FROM {xmpp_node_muc_groups} WHERE nid = %d AND gid = %d", $nid, $gid));
    $output .= '<div class="xmpp_node_muc_group_list_item">';
    $output .= '<div id="xmpp_node_muc_gid_'. $gid .'" class="'. (($result->sub_group == 0) ? 'xmpp_node_muc_group_list_item_name main': 'xmpp_node_muc_group_list_item_name sub') .'">';
    $output .= '<div class="name"><span class="title">Conference Name:</span> <span class="message">'. $result->name .'</span></div>';
    $output .= '<div class="subject"><span class="title">Subject:</span> <span class="message">'. ((strlen($result->subject) > 0) ? $result->subject : 'Not Set') .'</span></div>';
    // only show the join portion if the user actually is a member of the group otherwise do not show it
    if (_xmpp_node_muc_og_user_check(node_load($nid), $user)) {
      $output .= '<div class="xmpp_node_muc_group_join">[';
      $output .= __xmppclient_build_join_muc_link(t('Join'), $result->title, 'Drupal.xmpp_node_muc.group_chat');
      $output .= ']</div>';
    }
    // determinng if the user is currently logged into the group or not
    $online = db_result(db_query("SELECT 1 FROM {xmpp_node_muc_users} WHERE jid = '%s' AND gid = %d", $user->xmppclient['jid'], $gid));
    $output .= '<div class="online"><span class="title">My Status:</span> <span class="message">'. (($online == 1) ? 'Participating' : 'Not Participating') .'</span></div>';
    $output .= '</div>'; // end of xmpp_node_muc_group_list_item_name (main or sub depending)
    $output .= '</div>'; // end of xmpp_node_muc_group_list_item
    $output .= '</div>'; // end of xmpp_node_muc_group_list
  }

  return $output;
}

/**
 * Function retrieves the number of currently online subscribers who are in the group chat
 *
 * @param $nid
 *      Node id of the organic group
 * @param $gid
 *      Group id associated with the Node
 * @param $ajax
 *      Ajax initiated request
 */
function _xmpp_node_muc_online_muc_users($nid, $gid, $ajax = false) {

  $count = 0;
  $users = '';
  $result = db_query("SELECT * FROM {xmpp_node_muc_users} WHERE nid = %d AND gid = %d", $nid, $gid);
  while ($row = db_fetch_object($result)) {
    $users .= '<div class="xmpp_node_muc_online_user">'. $row->nickname .'('. format_date($row->join_time, XMPP_NODE_MUC_DATE_FORMAT) .')</div>';
    $count++;
  }

  if ($ajax) {
    $output .= 'Drupal.xmpp_node_muc.ajax_online_muc_users_refresh(\''. $gid . '\', \''. $count .'\', \''. str_replace("'", "", $users) .'\');';
  }
  else {
    $output = '<div id="xmpp_node_muc_online_'. $gid .'" class="xmpp_node_muc_online">';
    $output .= '<div id="xmpp_node_muc_online_show_'. $gid .'" class="xmpp_node_muc_online_show">[<a href="javascript:Drupal.xmpp_node_muc.online_users_toggle(\''. $gid .'\');">Show</a>]</div>';
    if ($count > 0) {
      $output .= '<div id="xmpp_node_muc_online_count_'. $gid .'" class="xmpp_node_muc_online_count"><span class="title">Active Participants:</span> <span class="message">'. $count .'</span></div>';
    }
    else {
      $output .= '<div id="xmpp_node_muc_online_count_'. $gid .'" class="xmpp_node_muc_online_count">Online Users: <span class="message">'. $count .'</span></div>';
      $output .= '<script type="text/javascript">$(document).ready(function() { $("#xmpp_node_muc_online_show_'. $gid .'").hide(); });</script>';
    }
    $output .= '<div id="xmpp_node_muc_online_users_'. $gid .'" class="xmpp_node_muc_online_users">';
    $output .= $users;
    $output .= '</div>';
    $output .= '</div>';
  }
  return $output;
}

/**
 * Function retrieves the log for the xmpp group and check if active
 *
 * @param $nid
 *      Node id of the organic group
 * @param $gid
 *      Group id associated with the Node
 * @param $ajax
 *      Ajax initiated request
 */
function _xmpp_node_muc_group_muc_log($nid, $gid, $ajax = false) {
  // retrieve the last message for the muc so we can determine when it was
  $mdate = db_result(db_query("SELECT MAX(mdate) FROM {xmpp_node_muc_log} WHERE nid = %d AND gid = %d AND body <> ''", $nid, $gid));
  $count = 0;
  $logs = '';
  $result = db_query("SELECT * FROM {xmpp_node_muc_log} WHERE nid = %d AND gid = %d AND body <> '' ORDER BY mdate DESC", $nid, $gid);
  while ($row = db_fetch_object($result)) {
    if ($count >= XMPP_NODE_MUC_BLOCK_MUC_LOG_AMOUNT) {
      break;
    }
    $uid = db_result(db_query("SELECT uid FROM {xmppclient_user} WHERE jid = '%s'", $row->nickname));
    if ($uid) {
      $account = user_load(array('uid' => $uid));
      $name = $account->name;
    }
    else {
      $name = $row->nickname;
    }
    $logs .= '<div class="xmpp_node_muc_activity_log_message">'. $name .' ('. format_date($row->mdate, XMPP_NODE_MUC_DATE_FORMAT) .'): '. $row->body .'</div>';
    $count++;
  }

  if ($ajax) {
    if (!$mdate) {
      $mdate = t('Never');
    }
    else {
      $mdate = str_replace("'", "", format_date($mdate, XMPP_NODE_MUC_DATE_FORMAT));
    }
    $output = 'Drupal.xmpp_node_muc.log_refresh(\''. $gid . '\', \''. $mdate .'\', \''. str_replace("'", "", $logs) .'\');';
  }
  else {
    $output = '<div id="xmpp_node_muc_activity_'. $gid .'" class="xmpp_node_muc_activity">';
    $output .= '<div id="xmpp_node_muc_activity_show_'. $gid .'" class="xmpp_node_muc_activity_show">[<a href="javascript:Drupal.xmpp_node_muc.activity_msgs_toggle(\''. $gid .'\');">'. t('Show') .'</a>]</div>';
    if ($mdate) {
      $output .= '<div id="xmpp_node_muc_activity_last_'. $gid .'" class="xmpp_node_muc_activity_last"><span class="title">'. t('Last Activity') .':</span> <span class="message">'. format_date($mdate, XMPP_NODE_MUC_DATE_FORMAT) .'</span></div>';
    }
    else {
      $output .= '<div id="xmpp_node_muc_activity_last_'. $gid .'" class="xmpp_node_muc_activity_last"><span class="title">'. t('Last Activity') .':</span> <span class="message">'. t('Never') .'</span></div>';
      $output .= '<script type="text/javascript">$(document).ready(function() { $("#xmpp_node_muc_activity_show_'. $gid .'").hide(); });</script>';
    }
    $output .= '<div id="xmpp_node_muc_activity_log_'. $gid .'" class="xmpp_node_muc_activity_log">';
    $output .= $logs;
    $output .= '</div>'; // end of xmpp_node_muc_activity_log
    $output .= '</div>'; // end of xmpp_node_muc_activity
  }
  return $output;
}

